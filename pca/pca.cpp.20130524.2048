#include <iostream>
#include <vector>

#include <Eigen/Dense>
using Eigen::MatrixXd;

//! http://stackoverflow.com/questions/1577475/c-sorting-and-keeping-track-of-indexes
template <typename T>
std::vector<size_t> 
sort_indexes(const std::vector<T> &v) {

  // initialize original index locations
  std::vector<size_t> idx(v.size());
  for (size_t i = 0; i != idx.size(); ++i) idx[i] = i;

  // sort indexes based on comparing values in v
  std::sort(idx.begin(), idx.end(), [&v](size_t i1, size_t i2) {return v[i1] > v[i2];});

  return idx;
}

void
pca()
{
  using namespace std;
  using namespace Eigen;
  
  MatrixXd X(2,3);
  X(0,0) = 3.3;
  X(1,0) = 2.1;
  X(0,1) = 2.5;
  X(1,1) = 1.4;
  X(0,2) = 2.2;
  X(1,2) = 1.7;

  size_t n_data = X.cols();
  size_t hi_dim = X.rows();
  cout << "size(X)= " << n_data << " x " << hi_dim << endl;
  cout << "X = " << endl;
  cout << X << endl << endl;  

  //(1) C_barenterize: X_bar = X * H
  MatrixXd H;
  H = MatrixXd::Identity(n_data,n_data) - ( ((double)1/n_data) * MatrixXd::Ones(n_data,n_data) ); 
  cout << "H = " << endl;
  cout << H << endl << endl;
  
  MatrixXd X_bar;
  X_bar = X * H;
  cout << "X_bar = " << endl;
  cout << X_bar << endl << endl;
  
  //(2) C_barompute C_barovariance matrix C_bar_bar = X_bar * X_bar^T
  MatrixXd C_bar;
  C_bar = X_bar * X_bar.transpose();
  cout << "C_bar = " << endl;
  cout << C_bar << endl << endl;  
  
  //(3) Solve eigenvalue problem and sort the eigenvalue descending (obtaining the idx of sorted eigenvalue)
  SelfAdjointEigenSolver<MatrixXd> eigensolver(C_bar);
  if (eigensolver.info() != Success) abort();
  
  size_t n_eigvals = eigensolver.eigenvalues().size();
  cout << "n_data_eigvals= " << n_eigvals << endl;
  
  std::vector<double> eigvals(n_eigvals);
  for(size_t i=0; i<n_eigvals; ++i)
    eigvals[i] = eigensolver.eigenvalues()[i];
  
  std::vector<size_t> sorted_idxes;  
  sorted_idxes = sort_indexes<double>(eigvals);
  for(size_t i=0; i<sorted_idxes.size(); ++i)
    cout << sorted_idxes.at(i) << " ";
  cout << endl;
          
  cout << "The eigenvalues of A are:\n" << eigensolver.eigenvalues() << endl;
  cout << "eigvectors: \n" << eigensolver.eigenvectors() << endl;
  
  MatrixXd eigvectors;
  eigvectors = eigensolver.eigenvectors();
  
  MatrixXd B_pca(n_eigvals,n_eigvals);
  for(size_t i=0; i<sorted_idxes.size(); ++i)
    B_pca.col(i) << eigvectors.col(sorted_idxes.at(i));
  
  cout << "B_pca = " << endl;
  cout << B_pca << endl << endl;
  
  //(4) Project X onto princ. comp. space (and select the first lo_dim eigenvalues and the corresponding eigenstd::vectors)
  MatrixXd Z;
  Z = B_pca * (X - ((double)1/n_data) * X * MatrixXd::Ones(n_data,n_data));
  
  cout << "Z = " << endl;
  cout << Z << endl << endl;
} 

int
main()
{
  using namespace std;
  
  cout << "hi..." << endl;
  pca();

  return 0;
}
