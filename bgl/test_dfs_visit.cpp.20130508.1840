//=======================================================================
// Copyright 1997, 1998, 1999, 2000 University of Notre Dame.
// Authors: Andrew Lumsdaine, Lie-Quan Lee, Jeremy G. Siek
//
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//=======================================================================
#include <boost/config.hpp>
#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <map>
#include <boost/pending/stringtok.hpp>
#include <boost/utility.hpp>
#include <boost/graph/adjacency_list.hpp>
#include <boost/graph/visitors.hpp>
#include <boost/graph/breadth_first_search.hpp>
#include <boost/graph/depth_first_search.hpp>

using namespace std;

template <class VertexNameMap, class DistanceMap, typename Edge>
class DfsVisitor : public boost::dfs_visitor<>
{
public:
  DfsVisitor(VertexNameMap n, DistanceMap d) : name(n), distance(d) { }
  
  template <class Graph>
  void 
  discover_vertex(typename boost::graph_traits<Graph>::vertex_descriptor v,Graph&)
  {
    std::cout << "discover " << name[v] << std::endl;
  }

  template <class Graph>
  void 
  finish_vertex(typename boost::graph_traits<Graph>::vertex_descriptor v,Graph&)
  {
//    std::cout << "finish " << name[v] << std::endl;
    edges.erase(edges.end()-1);
  }
  
  template <class Graph>
  void tree_edge(typename boost::graph_traits<Graph>::edge_descriptor e,
                 Graph& g)
  {
    distance[boost::target(e, g)] = distance[boost::source(e, g)] + 1;
//    cout << "e(" << source(e,g) << "," << target(e,g) << ")" << "----------------------becomes a member of the search tree as of now"<< endl;
    
    edges.push_back(e);
    
    for(typename std::vector<Edge>::iterator i=edges.begin(); i!=edges.end(); ++i)
      cout << "e(" << source(*i,g) << "," << target(*i,g) << "), ";
    cout << endl;
    
    // Extract samples
    for(typename std::vector<Edge>::iterator i=edges.begin(); i!=edges.end(); ++i)
    {
      // Extract input feature from the source edge of *i and the heuristics(forward) path from *i to edges.back()
      
      //
    }
  }  

  template < typename Graph >
  void back_edge(typename boost::graph_traits<Graph>::edge_descriptor e, const Graph & g)
  {
    cout << "e(" << source(e,g) << "," << target(e,g) << endl;
    cerr << "in" << endl;
  }
  
private:
  VertexNameMap name;
  DistanceMap distance;
  
  std::vector<Edge> edges;
};

int
main()
{
  using namespace boost;
  //===========================================================================
  // Declare the graph type and object, and some property maps.

  typedef adjacency_list<vecS, vecS, directedS, property<vertex_name_t, std::string, property<vertex_color_t, default_color_type> >, property<edge_name_t, std::string, property<edge_weight_t, int> > > Graph;
  
  typedef graph_traits<Graph> Traits;
  typedef Traits::vertex_descriptor Vertex;
  typedef Traits::edge_descriptor Edge;
  typedef Traits::vertices_size_type size_type;

  typedef std::map<std::string, Vertex> NameVertexMap;
  NameVertexMap name2vertex;
  Graph g;

  typedef property_map<Graph, vertex_name_t>::type NameMap;
  property_map<Graph, edge_name_t>::type link_name = get(edge_name, g);

  //===========================================================================
  // Read the data file and construct the graph.
  
  Edge edge;
  bool inserted;      
  
  tie(edge, inserted) = add_edge(0,1,g);
  put(vertex_name, g, source(edge,g),"0");
  put(vertex_name, g, target(edge,g),"1");
    
  tie(edge, inserted) = add_edge(1,2,g);
  put(vertex_name, g, source(edge,g),"1");
  put(vertex_name, g, target(edge,g),"2");
    
  tie(edge, inserted) = add_edge(2,3,g);
  put(vertex_name, g, source(edge,g),"2");  
  put(vertex_name, g, target(edge,g),"3");
    
//  tie(edge, inserted) = add_edge(1,4,g);
//  put(vertex_name, g, source(edge,g),"1");  
//  put(vertex_name, g, target(edge,g),"4");
//  
//  tie(edge, inserted) = add_edge(4,5,g);
//  put(vertex_name, g, source(edge,g),"4");  
//  put(vertex_name, g, target(edge,g),"5");

//  tie(edge, inserted) = add_edge(4,6,g);
//  put(vertex_name, g, source(edge,g),"4");  
//  put(vertex_name, g, target(edge,g),"6");
      
  //===========================================================================
  Vertex src;
  src = vertices(g).first[0];
  
  boost::graph_traits<Graph>::vertex_iterator vi, vi_end;
   
  std::vector<size_type> dfs_distances(num_vertices(g), 0);
  DfsVisitor<NameMap, size_type*,Edge> vis(get(vertex_name, g), &dfs_distances[0]);
  
  cerr << "-------" << endl;

  for (boost::tie(vi,vi_end) = vertices(g); vi != vi_end; ++vi)
  {
    if( get(vertex_color,g,*vi)==color_traits<boost::default_color_type>::gray() )
      cerr << *vi << "= gray" << endl;
    else if( get(vertex_color,g,*vi)==color_traits<boost::default_color_type>::black() )
      cerr << *vi << "= black" << endl;
    else 
      cerr << *vi << "= white" << endl;
  }      
    
  src = 1;    
  depth_first_visit(g, src, vis, get(vertex_color, g));
  
  cerr << "-------" << endl;
  
  for (boost::tie(vi,vi_end) = vertices(g); vi != vi_end; ++vi)
  {
    put(vertex_color,g,*vi,color_traits<boost::default_color_type>::white());
  }      

  for (boost::tie(vi,vi_end) = vertices(g); vi != vi_end; ++vi)
  {
    if( get(vertex_color,g,*vi)==color_traits<boost::default_color_type>::gray() )
      cerr << *vi << "= gray" << endl;
    else if( get(vertex_color,g,*vi)==color_traits<boost::default_color_type>::black() )
      cerr << *vi << "= black" << endl;
    else 
      cerr << *vi << "= white" << endl;
  }      
        
  src = 2;    
  depth_first_visit(g, src, vis, get(vertex_color, g));
  
  return EXIT_SUCCESS;
}
