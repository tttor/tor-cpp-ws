//=======================================================================
// Copyright 1997, 1998, 1999, 2000 University of Notre Dame.
// Authors: Andrew Lumsdaine, Lie-Quan Lee, Jeremy G. Siek
//
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//=======================================================================
#include <boost/config.hpp>
#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <map>
#include <boost/pending/stringtok.hpp>
#include <boost/utility.hpp>
#include <boost/graph/adjacency_list.hpp>
#include <boost/graph/visitors.hpp>
#include <boost/graph/breadth_first_search.hpp>
#include <boost/graph/depth_first_search.hpp>

using namespace std;
using namespace boost;

template <class Graph>
class DataCollector: public boost::dfs_visitor<>
{
public:
//! This contructor is used to get features only as inputs during search, used to supply the learning machine in order to output the heuristic
DataCollector()
{ }

template <class DfsGraph>
void 
discover_vertex(typename boost::graph_traits<DfsGraph>::vertex_descriptor v,DfsGraph& g)
{
//  std::cout << "discover " << get(vertex_name,g,v) << std::endl;
//  std::cout << "out_degree(v,g)= " << out_degree(v,g) << std::endl;
}

//! In collecting samples _offline_, a new sample is collected whenever an edge is added to the hot_path_ i.e. becomes a part of the search tree 
template <class DfsGraph>
void tree_edge(typename boost::graph_traits<DfsGraph>::edge_descriptor e,DfsGraph& g)
{
//  cerr << "Adding: " << get(edge_name,g,e) << endl;
  hot_path_.push_back(e);
  
//  cerr << "hot_path_: ";
//  for(typename std::vector<typename boost::graph_traits<DfsGraph>::edge_descriptor>::const_iterator i=hot_path_.begin(); i!=hot_path_.end(); ++i)
//    cout << "e(" << get(vertex_name,g,source(*i,g)) << "," << get(vertex_name,g,target(*i,g)) << "), ";
//  cout << endl;
}

//! used in collecting samples _offline_, to maintain the hot path
template <class DfsGraph>
void 
finish_vertex(typename boost::graph_traits<DfsGraph>::vertex_descriptor v,DfsGraph& g)
{
//  std::cerr << "finish " << get(vertex_name,g,v) << std::endl;  
  hot_path_.erase( hot_path_.end()-1 );

  // This is to make the vertex named TidyHome to be discovered again if there are multiple solution paths
  std::string name;
  name = get(vertex_name,g,v);

  if( !strcmp(name.c_str(),"TidyHome") )
//    put(vertex_color,g,v,color_traits<boost::default_color_type>::white());
    put(vertex_name,g,v,"test");
}

private:

std::vector<typename boost::graph_traits<Graph>::edge_descriptor> hot_path_;
std::vector<std::string> labels_;
};

template<typename GlobalGraph>
class OptSolPathEstimator: public boost::dfs_visitor<>
{
public:
OptSolPathEstimator(std::vector<  std::vector< typename boost::graph_traits<GlobalGraph>::edge_descriptor >  >* paths)
: paths_(paths)
{ }

template <class Graph>
void 
discover_vertex(typename boost::graph_traits<Graph>::vertex_descriptor v,Graph&)
{
  std::cout << "discover " << v << std::endl;
}

//template <class Graph>
//void 
//finish_vertex(typename boost::graph_traits<Graph>::vertex_descriptor v,Graph& g)
//{
//  std::cout << "finish " << v << std::endl;
//  
//  if( (boost::out_degree(v,g) == 0) and !hot_path_.empty() )
//  {
//    cerr << "paths_.push_back(hot_path_).size()= " << hot_path_.size() << endl;
//    paths_->push_back(hot_path_);
//    
//    // reset the vertex color of this leaf so that other paths to this leaf can be found (again)
////    put( vertex_color,g,v,color_traits<boost::default_color_type>::white() );

////  if( !strcmp(name.c_str(),"TidyHome") )
//    put(vertex_color,g,v,color_traits<boost::default_color_type>::white());
//  }
//    
//  hot_path_.erase(hot_path_.end()-1);
//}

//! used in collecting samples _offline_, to maintain the hot path
template <class Graph>
void 
finish_vertex(typename boost::graph_traits<Graph>::vertex_descriptor v,Graph& g)
{
//  std::cerr << "finish " << get(vertex_name,g,v) << std::endl;  
  hot_path_.erase( hot_path_.end()-1 );

  // This is to make the vertex named TidyHome to be discovered again if there are multiple solution paths
  std::string name;
  name = get(vertex_name,g,v);

//  if( !strcmp(name.c_str(),"TidyHome") )
//    put(vertex_color,g,v,color_traits<boost::default_color_type>::white());
}

template <class Graph>
void tree_edge(typename boost::graph_traits<Graph>::edge_descriptor e,Graph& g)
{
  hot_path_.push_back(e);
  
  for(typename std::vector< typename boost::graph_traits<GlobalGraph>::edge_descriptor >::iterator i=hot_path_.begin(); i!=hot_path_.end(); ++i)
    cout << "e(" << source(*i,g) << "," << target(*i,g) << "), ";
  cout << endl;
}

private:

std::vector<  std::vector< typename boost::graph_traits<GlobalGraph>::edge_descriptor >  >* paths_;
std::vector< typename boost::graph_traits<GlobalGraph>::edge_descriptor > hot_path_;
};

int
main()
{
  using namespace boost;
  //===========================================================================
  // Declare the graph type and object, and some property maps.

  typedef adjacency_list<vecS, vecS, directedS, property<vertex_name_t, std::string, property<vertex_color_t, default_color_type> >, property<edge_name_t, std::string, property<edge_weight_t, int> > > Graph;
  
  typedef graph_traits<Graph> Traits;
  typedef Traits::vertex_descriptor Vertex;
  typedef Traits::edge_descriptor Edge;
  typedef Traits::vertices_size_type size_type;

  typedef std::map<std::string, Vertex> NameVertexMap;
  NameVertexMap name2vertex;
  Graph g;

  typedef property_map<Graph, vertex_name_t>::type NameMap;
  property_map<Graph, edge_name_t>::type link_name = get(edge_name, g);

  //===========================================================================
  // Read the data file and construct the graph.
  
  Edge edge;
  bool inserted;      
  
  tie(edge, inserted) = add_edge(0,1,g);
  put(vertex_name, g, source(edge,g),"0");
  put(vertex_name, g, target(edge,g),"1");
    
  tie(edge, inserted) = add_edge(1,2,g);
  put(vertex_name, g, source(edge,g),"1");
  put(vertex_name, g, target(edge,g),"2");
    
  tie(edge, inserted) = add_edge(1,3,g);
  put(vertex_name, g, source(edge,g),"1");  
  put(vertex_name, g, target(edge,g),"3");

  tie(edge, inserted) = add_edge(3,4,g);
  put(vertex_name, g, source(edge,g),"3");  
  put(vertex_name, g, target(edge,g),"4");  
  
  tie(edge, inserted) = add_edge(2,4,g);
  put(vertex_name, g, source(edge,g),"2");  
  put(vertex_name, g, target(edge,g),"4");   
    
//  tie(edge, inserted) = add_edge(1,4,g);
//  put(vertex_name, g, source(edge,g),"1");  
//  put(vertex_name, g, target(edge,g),"4");
//  
//  tie(edge, inserted) = add_edge(4,5,g);
//  put(vertex_name, g, source(edge,g),"4");  
//  put(vertex_name, g, target(edge,g),"5");

//  tie(edge, inserted) = add_edge(4,6,g);
//  put(vertex_name, g, source(edge,g),"4");  
//  put(vertex_name, g, target(edge,g),"6");
      
  //===========================================================================
//  Vertex src;
//  std::vector<size_type> dfs_distances(num_vertices(g), 0);
//  DfsVisitor<NameMap, size_type*,Edge> vis(get(vertex_name, g), &dfs_distances[0]);
  
//  src = vertices(g).first[0];
//  
//  boost::graph_traits<Graph>::vertex_iterator vi, vi_end;
//   
//  std::vector<size_type> dfs_distances(num_vertices(g), 0);
//  DfsVisitor<NameMap, size_type*,Edge> vis(get(vertex_name, g), &dfs_distances[0]);
//  
//  cerr << "-------" << endl;

//  for (boost::tie(vi,vi_end) = vertices(g); vi != vi_end; ++vi)
//  {
//    if( get(vertex_color,g,*vi)==color_traits<boost::default_color_type>::gray() )
//      cerr << *vi << "= gray" << endl;
//    else if( get(vertex_color,g,*vi)==color_traits<boost::default_color_type>::black() )
//      cerr << *vi << "= black" << endl;
//    else 
//      cerr << *vi << "= white" << endl;
//  }      
    
//  src = 1;    
//  depth_first_visit(g, src, vis, get(vertex_color, g));
//  
//  cerr << "-------" << endl;
//  
//  for (boost::tie(vi,vi_end) = vertices(g); vi != vi_end; ++vi)
//  {
//    put(vertex_color,g,*vi,color_traits<boost::default_color_type>::white());
//  }      

//  for (boost::tie(vi,vi_end) = vertices(g); vi != vi_end; ++vi)
//  {
//    if( get(vertex_color,g,*vi)==color_traits<boost::default_color_type>::gray() )
//      cerr << *vi << "= gray" << endl;
//    else if( get(vertex_color,g,*vi)==color_traits<boost::default_color_type>::black() )
//      cerr << *vi << "= black" << endl;
//    else 
//      cerr << *vi << "= white" << endl;
//  }      

  boost::graph_traits<Graph>::vertex_iterator vi, vi_end;
  for (boost::tie(vi,vi_end) = vertices(g); vi != vi_end; ++vi)
  {
    if( get(vertex_color,g,*vi)==color_traits<boost::default_color_type>::gray() )
      cerr << *vi << "= gray" << endl;
    else if( get(vertex_color,g,*vi)==color_traits<boost::default_color_type>::black() )
      cerr << *vi << "= black" << endl;
    else 
      cerr << *vi << "= white" << endl;
  }   

  Vertex src;        
  src = 0;    
  
  std::vector< std::vector<Edge> > paths; 
  OptSolPathEstimator<Graph> ospe(&paths);
  
  Graph tmp_g;
  tmp_g = g;
  
  depth_first_visit(tmp_g,src,ospe,get(vertex_color,tmp_g));
  
  DataCollector<Graph> dc;
  depth_first_visit(g,src,dc,get(vertex_color,g));
  
  cerr << "in paths.size()= "  << paths.size() << endl;
  for(typename std::vector< std::vector<Edge> >::const_iterator i=paths.begin(); i!=paths.end(); ++i)
  {
    cerr << "Path " << i-paths.begin() << endl;
    for(std::vector<Edge>::const_iterator j=i->begin(); j!=i->end(); ++j)
    {
      cout << "e(" << source(*j,g) << "," << target(*j,g) << "), ";
    }
    cout << endl;
  }

  for (boost::tie(vi,vi_end) = vertices(g); vi != vi_end; ++vi)
  {
    if( get(vertex_color,g,*vi)==color_traits<boost::default_color_type>::gray() )
      cerr << *vi << "= gray" << endl;
    else if( get(vertex_color,g,*vi)==color_traits<boost::default_color_type>::black() )
      cerr << *vi << "= black" << endl;
    else 
      cerr << *vi << "= white" << endl;

    put( vertex_color,g,*vi,color_traits<boost::default_color_type>::white() );
  }   
  
  cerr << "============================================================================================" << endl;
  for (boost::tie(vi,vi_end) = vertices(tmp_g); vi != vi_end; ++vi)
  {
    if( get(vertex_color,tmp_g,*vi)==color_traits<boost::default_color_type>::gray() )
      cerr << *vi << "= gray" << endl;
    else if( get(vertex_color,tmp_g,*vi)==color_traits<boost::default_color_type>::black() )
      cerr << *vi << "= black" << endl;
    else 
      cerr << *vi << "= white" << endl;
  }   
    
     
  cerr << "============================================================================================" << endl;
    
  src = 1;
  paths.clear();
  
  depth_first_visit(g,src,ospe,get(vertex_color, g));
 
  cerr << "paths.size()= "  << paths.size() << endl;
  for(typename std::vector< std::vector<Edge> >::const_iterator i=paths.begin(); i!=paths.end(); ++i)
  {
    cerr << "Path " << i-paths.begin() << endl;
    for(std::vector<Edge>::const_iterator j=i->begin(); j!=i->end(); ++j)
    {
      cout << "e(" << source(*j,g) << "," << target(*j,g) << "), ";
    }
    cout << endl;
  } 
  
  return EXIT_SUCCESS;
}
